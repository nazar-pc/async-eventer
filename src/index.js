// Generated by LiveScript 1.5.0
/**
 * @package Async eventer
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var callbacks_map;
  callbacks_map = new WeakMap;
  /**
   * @constructor
   */
  function Eventer(){
    if (!(this instanceof Eventer)) {
      return new Eventer;
    }
    callbacks_map.set(this, {});
  }
  Eventer.prototype = {
    /**
     * @param {string}		event
     * @param {!Function}	callback
     *
     * @return {!Eventer}
     */
    'on': function(event, callback){
      var ref$;
      if (event && callback) {
        ((ref$ = callbacks_map.get(this))[event] || (ref$[event] = [])).push(callback);
      }
      return this;
    }
    /**
     * @param {string}		event
     * @param {!Function}	[callback]
     *
     * @return {!Eventer}
     */,
    'off': function(event, callback){
      var callbacks;
      callbacks = callbacks_map.get(this)[event];
      if (callbacks) {
        callbacks.splice(callbacks.indexOf(callback), callback
          ? 1
          : callbacks.length);
      }
      return this;
    }
    /**
     * @param {string}		event
     * @param {!Function}	callback
     *
     * @return {!Eventer}
     */,
    'once': function(event, callback){
      var callback_, this$ = this;
      if (event && callback) {
        callback_ = function(){
          if (callback_.used) {
            return;
          }
          callback_.used = true;
          this$['off'](event, callback_);
          return callback.apply(null, arguments);
        };
        this['on'](event, callback_);
      }
      return this;
    }
    /**
     * @param {string}	event
     * @param {...*}	param
     *
     * @return {!Promise}
     */,
    'fire': function(event, param){
      var result_promise, params;
      result_promise = Promise.resolve();
      params = arguments;
      (callbacks_map.get(this)[event] || []).forEach(function(callback){
        result_promise = result_promise.then(function(){
          var result;
          result = callback.call.apply(callback, params);
          if (result === false) {
            return Promise.reject();
          } else {
            return result;
          }
        });
      });
      result_promise['catch'](function(error){
        if (error instanceof Error) {
          console.error(error);
        }
      });
      return result_promise;
    }
  };
  if (typeof define === 'function' && define['amd']) {
    define(function(){
      return Eventer;
    });
  } else if (typeof exports === 'object') {
    module.exports = Eventer;
  } else {
    this['async_eventer'] = Eventer;
  }
}).call(this);
