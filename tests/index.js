// Generated by LiveScript 1.5.0
/**
 * @package   Async eventer
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var Eventer, test;
  Eventer = require('..');
  test = require('tape');
  test('Basic usage', function(t){
    var result, instance;
    t.plan(9);
    instance = Eventer();
    result = 0;
    instance.on('event_1', function(){
      ++result;
    });
    instance.once('event_1', function(){
      ++result;
    });
    instance.fire('event_1').then(function(){
      t.equal(result, 2, 'on() and once() are called on fire()');
      instance.fire('event_1').then(function(){
        t.equal(result, 3, 'once() was not called on second fire(), but on() still was');
        instance.off('event_1');
        instance.fire('event_1').then(function(){
          t.equal(result, 3, 'off() unregistered event handler');
          result = [];
          function event_2_handler(){
            result.push(1);
          }
          instance.on('event_2', event_2_handler);
          instance.once('event_2', function(){
            result.push(2);
          });
          instance.on('event_2', function(){
            result.push(3);
          });
          instance.fire('event_2').then(function(){
            t.equal(result.join(', '), [1, 2, 3].join(', '), 'event handlers are called in the order they were registered');
            result = [];
            instance.off('event_2', event_2_handler);
            instance.fire('event_2').then(function(){
              var return_1, return_2, return_3, return_4;
              t.equal(result.join(', '), [3].join(', '), 'specific event handler was unregistered');
              instance.off('event_2');
              result = [];
              return_1 = true;
              return_2 = Promise.resolve();
              return_3 = false;
              return_4 = true;
              instance.on('event_3', function(){
                result.push(1);
                return return_1;
              });
              instance.on('event_3', function(){
                result.push(2);
                return return_2;
              });
              instance.on('event_3', function(){
                result.push(3);
                return return_3;
              });
              instance.on('event_3', function(){
                result.push(4);
                return return_4;
              });
              instance.fire('event_3')['catch'](function(){
                t.equal(result.join(', '), [1, 2, 3].join(', '), 'false prevents further event handlers execution');
                result = [];
                return_2 = '';
                return_3 = Promise.reject('x');
                instance.fire('event_3')['catch'](function(){
                  var data_1, data_2;
                  t.equal(result.join(', '), [1, 2, 3].join(', '), "rejected Promise also prevents further event handlers execution");
                  instance.off('event_3');
                  instance.on('event_4', function(data_1, data_2){
                    data_1.x = 'x';
                    data_2.y = 'y';
                  });
                  data_1 = {};
                  data_2 = {};
                  instance.fire('event_4', data_1, data_2).then(function(){
                    t.equal(data_1.x, 'x', 'First argument is fine');
                    t.equal(data_2.y, 'y', 'Second argument is fine');
                    instance.off('event_4');
                  });
                });
              });
            });
          });
        });
      });
    });
  });
}).call(this);
